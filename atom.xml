<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://note.iqtian.com</id>
    <title>优哈游笔记</title>
    <updated>2020-12-17T03:07:55.374Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://note.iqtian.com"/>
    <link rel="self" href="https://note.iqtian.com/atom.xml"/>
    <subtitle>晴天</subtitle>
    <logo>https://note.iqtian.com/images/avatar.png</logo>
    <icon>https://note.iqtian.com/favicon.ico</icon>
    <rights>All rights reserved 2020, 优哈游笔记</rights>
    <entry>
        <title type="html"><![CDATA[博客嵌入自适应 B 站视频]]></title>
        <id>https://note.iqtian.com/post/OX3rttR5U/</id>
        <link href="https://note.iqtian.com/post/OX3rttR5U/">
        </link>
        <updated>2020-12-14T10:43:06.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="如何嵌入-b-站视频">如何嵌入 B 站视频</h1>
<p>B 站的网页版已经提供了内嵌的 iframe 代码，我们只需要一键复制后就可以直接使用。</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="如何嵌入-b-站视频">如何嵌入 B 站视频</h1>
<p>B 站的网页版已经提供了内嵌的 iframe 代码，我们只需要一键复制后就可以直接使用。</p>
<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://weqtian.com/upload/2020/12/image-8404bf01debb48c8abda7359d097130a.png" alt="image.png" loading="lazy"></figure>
<h1 id="外链的引用方式">外链的引用方式</h1>
<p>但是 B 站提供的外链在页面上显示经常是&quot;残废版&quot;，而且不能调节清晰度、弹幕之类的，也不能全屏，非常影响体验。</p>
<p><strong>原版链接</strong></p>
<pre><code class="language-html">&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=328334002&amp;bvid=BV1tA411q7xi&amp;cid=193834244&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt; &lt;/iframe&gt;
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://weqtian.com/upload/2020/12/image-f638c84cdd5a47afaa1a1a29dab25449.png" alt="image.png" loading="lazy"></figure>
<h1 id="增大版本">增大版本</h1>
<p>于是就想给它增大一下，也就是用 html 的方式调一下 width 和 height 的大小。</p>
<pre><code class="language-html">&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=328334002&amp;bvid=BV1tA411q7xi&amp;cid=193834244&amp;page=1&quot; frameborder=&quot;no&quot; scrolling=&quot;no&quot; width=&quot;95%&quot; height=&quot;600&quot;&gt;&lt;/iframe&gt;&lt;/iframe&gt;
</code></pre>
<p>这样其实一般来说是够用了，但是它也有问题，就是移动端适配非常差，我们能不能搞一种更通用的引用方式呢？</p>
<figure data-type="image" tabindex="3"><img src="https://weqtian.com/upload/2020/12/image-f5ce969bf0e24122b21cbc7821f0c598.png" alt="image.png" loading="lazy"></figure>
<h1 id="自适应版">自适应版</h1>
<p>前面引那么多就是为了给出最后这个结论，当然是可以实现自适应的，代码如下，</p>
<pre><code class="language-html">&lt;div style=&quot;position: relative; padding: 30% 45%;&quot;&gt;
&lt;iframe style=&quot;position: absolute; width: 100%; height: 100%; left: 0; top: 0;&quot; src=&quot;//player.bilibili.com/player.html?aid=52516662&amp;bvid=BV1o4411E7xW&amp;cid=91907659&amp;page=1&amp;as_wide=1&amp;high_quality=1&amp;danmaku=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</code></pre>
<div style="position: relative; padding: 30% 45%;">
<iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?aid=39425207&bvid=BV1Tt411678p&cid=70027240&page=1&as_wide=1&high_quality=1&danmaku=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>
</div>
<p><strong>参数说明：</strong></p>
<table>
<thead>
<tr>
<th>key</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>aid</td>
<td>之前 B 站使用的 AV 号</td>
</tr>
<tr>
<td>bvid</td>
<td>目前的 BV 号</td>
</tr>
<tr>
<td>page</td>
<td>第几个视频, 起始下标为 1 (默认值也是为 1)就是 B 站视频, 选集里的, 第几个视频</td>
</tr>
<tr>
<td>as_wide</td>
<td>是否宽屏 【1: 宽屏, 0: 小屏】</td>
</tr>
<tr>
<td>high_quality</td>
<td>是否高清 【1: 高清(最高1080p) / 0: 最低视频质量(默认)】</td>
</tr>
<tr>
<td>danmaku</td>
<td>是否开启弹幕 【1: 开启(默认), 0: 关闭】</td>
</tr>
</tbody>
</table>
<p><strong>相关信息：</strong></p>
<p>经测试 <code>high_quality</code> 参数可以正常使用，此参数控制外链播放器的默认清晰度：<br>
=1 时默认清晰度是最高非大会员清晰度，例如：<br>
（1）原视频清晰度有 360p、480p、720p，外链播放器默认为最高的 720p，<br>
（2）原视频清晰度有 360p、480p、720p、1080p，外链播放器默认为最高的 1080p，<br>
（3）原视频清晰度有 360p、480p、720p、1080p、1080p+，外链播放器默认为 1080p，<br>
选择其他清晰度会打开原视频页面，</p>
<p>注本文引用 https://bestzuo.cn/posts/blog-bilbli.html 该文章，如有侵权请联系删除。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nginx反向代理后端获取客户端真实IP]]></title>
        <id>https://note.iqtian.com/post/EqmcpNqS9/</id>
        <link href="https://note.iqtian.com/post/EqmcpNqS9/">
        </link>
        <updated>2020-12-14T10:42:21.000Z</updated>
        <summary type="html"><![CDATA[<p>Nginx反向代理后，Servlet应用通过request.getRemoteAddr()取到的IP是Nginx的IP地址，并非客户端真实IP，通过request.getRequestURL()获取的域名、协议、端口都是Nginx访问Web应用时的域名、协议、端口，而非客户端浏览器地址栏上的真实域名、协议、端口。</p>
]]></summary>
        <content type="html"><![CDATA[<p>Nginx反向代理后，Servlet应用通过request.getRemoteAddr()取到的IP是Nginx的IP地址，并非客户端真实IP，通过request.getRequestURL()获取的域名、协议、端口都是Nginx访问Web应用时的域名、协议、端口，而非客户端浏览器地址栏上的真实域名、协议、端口。</p>
<!-- more -->
<p>Nginx的反向代理实际上是客户端和真实的应用服务器之间的一个桥梁，客户端（一般是浏览器）访问Nginx服务器，Nginx再去访问Web应用服务器。对于Web应用来说，这次HTTP请求的客户端是Nginx而非真实的客户端浏览器，如果不做特殊处理的话，Web应用会把Nginx当作请求的客户端，获取到的客户端信息就是Nginx的一些信息。</p>
<p>解决这个问题要从两个方面来解决：</p>
<ol>
<li>由于Nginx是代理服务器，所有客户端请求都从Nginx转发到Tomcat，如果Nginx不把客户端真实IP、域名、协议、端口告诉Tomcat，那么Tomcat应用是永远不会知道这些信息的，所以需要Nginx配置一些HTTP Header来将这些信息告诉被代理的Tomcat；</li>
<li>Tomcat这一端，不能再傻乎乎的获取直接和它连接的客户端（也就是Nginx）的信息，而是要从Nginx传递过来的HTTP Header中获取客户端信息。</li>
</ol>
<h1 id="废话不多说直接上配置">废话不多说直接上配置</h1>
<p>在代理的每个location处添加以下配置：</p>
<pre><code class="language-nginx">proxy_set_header Host $http_host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $scheme;
</code></pre>
<p>解释以下上面的配置，以上配置是在Nginx反向代理的时候，添加一些请求Header。</p>
<ol>
<li>Host包含客户端真实的域名和端口号；</li>
<li>X-Forwarded-Proto表示客户端真实的协议（http还是https）；</li>
<li>X-Real-IP表示客户端真实的IP；</li>
<li>X-Forwarded-For这个Header和X-Real-IP类似，但它在多层代理时会包含真实客户端及中间每个代理服务器的IP。</li>
</ol>
<p><strong>配置到这一步后，还不能彻底解决问题。tomcat也需要配置</strong></p>
<p>如果你在网上搜索“Java如何获取客户端真实IP”，搜索到的解决方案大多是通过获取HTTP请求头request.getHeader(&quot;X-Forwarded-For&quot;)或request.getHeader(&quot;X-Real-IP&quot;)来实现，也就是上面在Nginx上配置的Header，这种方案获取的结果的确是正确的，但觉得并不优雅。因为既然Servlet API提供了request.getRemoteAddr()方法获取客户端IP，那么无论有没有用反向代理对于代码编写者来说应该是透明的。下面介绍一种更加优雅的方式。</p>
<p>使用Tomcat作为应用服务器，可以通过配置Tomcat的server.xml文件，在Host元素内最后加入：即可</p>
<pre><code class="language-xml">&lt;Valve className=&quot;org.apache.catalina.valves.RemoteIpValve&quot; /&gt;

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Centos7 firewalld 防火墙配置]]></title>
        <id>https://note.iqtian.com/post/zZ8m-9eWA/</id>
        <link href="https://note.iqtian.com/post/zZ8m-9eWA/">
        </link>
        <updated>2020-12-14T10:41:34.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="centos7防火墙开放端口-删除端口-查看已开放的端口等">Centos7防火墙开放端口、删除端口、查看已开放的端口等</h1>
<p>Centos7默认安装了firewalld，如果没有安装的话，则需要YUM命令安装；firewalld真的用不习惯，与之前的iptable防火墙区别太大，但毕竟是未来主流讲究慢慢磨合它的设置规则；</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="centos7防火墙开放端口-删除端口-查看已开放的端口等">Centos7防火墙开放端口、删除端口、查看已开放的端口等</h1>
<p>Centos7默认安装了firewalld，如果没有安装的话，则需要YUM命令安装；firewalld真的用不习惯，与之前的iptable防火墙区别太大，但毕竟是未来主流讲究慢慢磨合它的设置规则；</p>
<!-- more -->
<h2 id="安装firewall命令">安装Firewall命令：</h2>
<pre><code class="language-bash">yum install firewalld firewalld-config
</code></pre>
<h2 id="firewall开启常见端口命令">Firewall开启常见端口命令：</h2>
<pre><code class="language-bash">firewall-cmd --zone=public --add-port=80/tcp --permanent
firewall-cmd --zone=public --add-port=443/tcp --permanent
firewall-cmd --zone=public --add-port=22/tcp --permanent
firewall-cmd --zone=public --add-port=21/tcp --permanent
firewall-cmd --zone=public --add-port=53/udp --permanent
</code></pre>
<h2 id="firewall关闭常见端口命令">Firewall关闭常见端口命令：</h2>
<pre><code class="language-bash">firewall-cmd --zone=public --remove-port=80/tcp --permanent
firewall-cmd --zone=public --remove-port=443/tcp --permanent
firewall-cmd --zone=public --remove-port=22/tcp --permanent
firewall-cmd --zone=public --remove-port=21/tcp --permanent
firewall-cmd --zone=public --remove-port=53/udp --permanent
</code></pre>
<h2 id="批量添加区间端口">批量添加区间端口</h2>
<pre><code class="language-bash">firewall-cmd --zone=public --add-port=4400-4600/udp --permanent
firewall-cmd --zone=public --add-port=4400-4600/tcp --permanent
</code></pre>
<h2 id="开启防火墙命令">开启防火墙命令：</h2>
<pre><code class="language-bash">systemctl start firewalld.service
</code></pre>
<h2 id="重启防火墙命令">重启防火墙命令：</h2>
<pre><code class="language-bash">firewall-cmd --reload  或者   service firewalld restart
</code></pre>
<h2 id="查看端口列表">查看端口列表：</h2>
<pre><code class="language-bash">firewall-cmd --permanent --list-port
</code></pre>
<h2 id="禁用防火墙">禁用防火墙</h2>
<pre><code class="language-bash">systemctl stop firewalld
</code></pre>
<h2 id="设置开机启动">设置开机启动</h2>
<pre><code class="language-bash">systemctl enable firewalld
</code></pre>
<h2 id="停止并禁用开机启动">停止并禁用开机启动</h2>
<pre><code class="language-bash">sytemctl disable firewalld
</code></pre>
<h2 id="查看状态">查看状态</h2>
<pre><code class="language-bash">systemctl status firewalld
# 或者 
firewall-cmd --state
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker配置加速pull镜像]]></title>
        <id>https://note.iqtian.com/post/xIrNCbMk8/</id>
        <link href="https://note.iqtian.com/post/xIrNCbMk8/">
        </link>
        <updated>2020-12-14T10:39:23.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="加速拉取镜像">加速拉取镜像</h3>
<p>在国内拉取<a href="http://hub.docker.com" title="Docker注册表">Docker注册表</a>上的镜像时考虑到国内的互联网环境（网络因素，被墙等）会拉取失败或者贼慢的情况我们需要给Docker配置一下pull加速</p>
]]></summary>
        <content type="html"><![CDATA[<h3 id="加速拉取镜像">加速拉取镜像</h3>
<p>在国内拉取<a href="http://hub.docker.com" title="Docker注册表">Docker注册表</a>上的镜像时考虑到国内的互联网环境（网络因素，被墙等）会拉取失败或者贼慢的情况我们需要给Docker配置一下pull加速</p>
<!-- more -->
<h3 id="配置加速">配置加速</h3>
<h5 id="第一种是使用国内阿里云提供的容器服务里的加速">第一种是使用国内阿里云提供的容器服务里的加速</h5>
<p>针对Docker客户端版本大于 1.10.0 的用户</p>
<p>您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</p>
<pre><code class="language-json">sudo mkdir -p /etc/docker

sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'
{
  &quot;registry-mirrors&quot;: [&quot;https://aijuoso5.mirror.aliyuncs.com&quot;]
}
EOF

sudo systemctl daemon-reload

sudo systemctl restart docker
</code></pre>
<p>这里的<code>https://aijuoso5.mirror.aliyuncs.com</code>是我的加速地址你可以登录自己的阿里云容器镜像服务控制台查看自己的地址是：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/repositories" title="https://cr.console.aliyun.com/cn-hangzhou/instances/repositories">https://cr.console.aliyun.com/cn-hangzhou/instances/repositories</a></p>
<h5 id="第二种是使用daocloud的加速">第二种是使用DaoCloud的加速</h5>
<p>同上面阿里云的一样只需要改加速地址即可</p>
<pre><code class="language-json">sudo mkdir -p /etc/docker

sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'
{
  &quot;registry-mirrors&quot;: [&quot;http://f1361db2.m.daocloud.io&quot;]
}
EOF

sudo systemctl daemon-reload

sudo systemctl restart docker
</code></pre>
<p>也可以使用命令直接就可以自动给你配置好</p>
<pre><code class="language-bash">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io # 这个命令对Centos8不太友好
</code></pre>
<p>至此你pull镜像速度上会快很多</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker Compose安装Gitlab]]></title>
        <id>https://note.iqtian.com/post/HZ6l2rZVr/</id>
        <link href="https://note.iqtian.com/post/HZ6l2rZVr/">
        </link>
        <updated>2020-12-14T10:37:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="docker-compose安装gitlab">Docker Compose安装Gitlab</h3>
<p>Gitlab总共有两个版本一个是社区版一个是企业版，两个版本功能上基本没区别但企业版要去Gitlab官方买授权证书要花钱所以我们选择社区版已经够用了的基本上满足中小型企业及个人</p>
<p>我们登录服务器创建Gitlab目录及docker-compose.yml</p>
<pre><code class="language-bash">mkdir gitlab
</code></pre>
<pre><code class="language-bash">cd gitlab
</code></pre>
<pre><code class="language-bash">touch docker-compose.yaml
</code></pre>
<h3 id="配置文件">配置文件</h3>
<p><strong>docker-compose.yml配置文件</strong></p>
<pre><code class="language-yaml">version: '3.3'
services:
    gitlab:
      image: 'gitlab/gitlab-ce:latest'
      container_name: 'gitlab'
      restart: always
      hostname: 'gitlab' #填写计算机名即可
      environment:
        TZ: 'Asia/Shanghai'
        GITLAB_OMNIBUS_CONFIG: |
         external_url 'https://mqthub.com'  #访问地址
         # HTTPS配置
         nginx['enable'] = true
         nginx['redirect_http_to_https']= true
         nginx['ssl_certificate']= &quot;/home/cert/mqthub.com/mqthub.com.pem&quot;
         nginx['ssl_certificate_key']= &quot;/home/cert/mqthub.com.com/mqthub.com.key&quot;
         # 端口配置
         gitlab_rails['gitlab_shell_ssh_port'] = 2222
         unicorn['port'] = 8880
         # Email配置
         gitlab_rails['smtp_enable'] = true
         gitlab_rails['smtp_address'] = &quot;smtp.exmail.qq.com&quot;
         gitlab_rails['smtp_port'] = 465
         gitlab_rails['smtp_user_name'] = &quot;noreply@mqtian.com&quot;
         gitlab_rails['smtp_password'] = &quot;xxx&quot;
         gitlab_rails['smtp_authentication'] = &quot;login&quot;
         gitlab_rails['smtp_enable_starttls_auto'] = true
         gitlab_rails['smtp_tls'] = true
         gitlab_rails['gitlab_email_from'] = 'noreply@mqtian.com'
      ports:
        - '80:80'        #http端口
        - '443:443'   #https端口
        - '222:22'   #配置222端口转发到容器的22端口上
      volumes:
        - ./etc:/etc/gitlab             #Gitlab配置文件目录
        - ./data:/var/opt/gitlab  #Gitlab数据目录
        - ./logs:/var/log/gitlab   #Gitlab日志目录
        - ~/cert/:/home/cert/    #域名SSL证书目录
        - /etc/localtime:/etc/localtime:ro  #同步宿主机日期时间到容器
</code></pre>
<h3 id="启动gitlab">启动Gitlab</h3>
<pre><code class="language-bash">docker-compose up -d  # 启动
docker-compose stop  # 停止
docker-compose start # 启动
docker-compose restart # 重启
docker-compose down # 停止容器并移除
</code></pre>
<h3 id="访问gitlab">访问Gitlab</h3>
<p>我们安装完Gitlab后第一次访问会重定向到root用户重置密码界面重置完密码后使用root+刚刚设置的密码登录即可</p>
<p>我的Gitlab是配置了Github账号快速登录的如需要配置的话请邮件@我</p>
<p>我的邮件：mqtian@outlook.com 或者 hi@mqtian.com</p>
<figure data-type="image" tabindex="1"><img src="https://doc.mqtian.com/uploads/docker/images/m_82ff45621f32d26475807b0ad7a1cd67_r.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker Compose安装jenkins]]></title>
        <id>https://note.iqtian.com/post/njgg20QZC/</id>
        <link href="https://note.iqtian.com/post/njgg20QZC/">
        </link>
        <updated>2020-12-14T10:35:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="docker-compose安装jenkins">Docker Compose安装jenkins</h3>
<p>登录服务器并创建jenkins所需要的目录</p>
<pre><code class="language-bash">mkdir jenkins

cd jenkins

touch docker-compose.yaml

mkdir data
</code></pre>
<h3 id="配置文件">配置文件</h3>
<p><strong>docker-compose.yml配置文件</strong></p>
<pre><code class="language-yaml">jenkins:
        image: jenkins/jenkins:lts
        volumes:
            - ./data/jenkins/:/var/jenkins_home
            - /var/run/docker.sock:/var/run/docker.sock
            - /usr/bin/docker:/usr/bin/docker
            - ./usr/lib/x86_64-linux-gnu/libltdl.so.7:/usr/lib/x86_64-linux-gnu/libltdl.so.7
        ports:
            - &quot;2027:8080&quot;
        expose:
            - &quot;8080&quot;
            - &quot;50000&quot;
        privileged: true
        user: root
        restart: always
        container_name: jenkins
        environment:
            JAVA_OPTS: '-Djava.util.logging.config.file=/var/jenkins_home/log.properties'
</code></pre>
<h3 id="启动jenkins">启动jenkins</h3>
<pre><code class="language-bash">docker-compose up -d  # 启动
docker-compose stop  # 停止
docker-compose start # 启动
docker-compose restart # 重启
docker-compose down # 停止容器并移除
</code></pre>
<h3 id="权限问题">权限问题</h3>
<p>jenkins启动成功后日志会出现报错那是因为权限问题导致的我们需要给data目录权限</p>
<pre><code class="language-bash">chown -R 1000:1000 /data/jenkins
</code></pre>
<p>解决完之后我们访问jenkins服务器IP+端口访问<br>
<img src="https://doc.mqtian.com/uploads/docker/images/m_d2179e765fdcf523cc437ae9a889035a_r.png" alt="" loading="lazy"></p>
<p>解锁jenkins密钥如下命令会输出密钥复制到jenkins并点击继续即可</p>
<pre><code class="language-bash">cat /data/jenkins/secrets/initialAdminPassword
</code></pre>
<p>如果上面的查看密钥方法没找到的话可以进入容器内查看</p>
<pre><code class="language-bash">docker exec -it jenkins bash 

cat /var/jenkins_home/secrets/initialAdminPassword
</code></pre>
<p>往后就是基础操作了下一步进行插件安装然后再创建用户即可</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker Compose安装Redis]]></title>
        <id>https://note.iqtian.com/post/4wvNnZBoi/</id>
        <link href="https://note.iqtian.com/post/4wvNnZBoi/">
        </link>
        <updated>2020-12-14T10:34:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="docker-compose安装redis">Docker Compose安装Redis</h3>
<p><strong>登录服务器并创建redis目录及redis配置文件</strong></p>
<pre><code class="language-bash">mkdir redis

cd redis

touch docker-compose.yaml

touch redis.conf
</code></pre>
<h3 id="配置文件">配置文件</h3>
<p><strong>docker-compose.yml配置文件</strong></p>
<pre><code class="language-yaml">version: &quot;3.3&quot;
services:
    redis:
        image: &quot;redis:latest&quot;
        container_name: redis-pord
        restart: always
        ports:
          - &quot;6379:6379&quot;
        volumes:
          - ./redis.conf:/etc/redis/redis.conf:rw
          - ./data:/data:rw
        command:
          # 执行的命令
          redis-server /etc/redis/redis.conf --appendonly yes
</code></pre>
<p><strong>redis.conf配置文件</strong></p>
<pre><code class="language-conf">requirepass 123456
appendonly yes
</code></pre>
<h3 id="启动redis">启动Redis</h3>
<pre><code class="language-bash">docker-compose up -d  # 启动
docker-compose stop  # 停止
docker-compose start # 启动
docker-compose restart # 重启
docker-compose down # 停止容器并移除
</code></pre>
<h3 id="测试连接redis">测试连接Redis</h3>
<p>使用服务器IP加6379及Redis密码即可访问Redis了<br>
<img src="/uploads/docker/images/m_c168ebd1cb1fe02b1ebf03e4ea2a71fa_r.png" alt="" loading="lazy"></p>
<p>Redis Windows版客户端下载地址<br>
https://github.com/qishibo/AnotherRedisDesktopManager/releases</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker Compose安装Tomcat]]></title>
        <id>https://note.iqtian.com/post/JLSTaagax/</id>
        <link href="https://note.iqtian.com/post/JLSTaagax/">
        </link>
        <updated>2020-12-14T10:33:03.000Z</updated>
        <content type="html"><![CDATA[<h3 id="docker-compose安装tomcat">Docker Compose安装Tomcat</h3>
<p>登录服务器并创建 <code>conf</code> <code>docker-compose.yaml</code> conf是目录Tomcat的配置文件目录后一个是文件。</p>
<pre><code class="language-bash">mkdir tomcat

mkdir conf

touch docker-compose.yaml

cd conf

touch server.xml
</code></pre>
<h3 id="配置文件">配置文件</h3>
<p><strong>docker-compose.yaml配置文件</strong></p>
<pre><code class="language-yaml">version: &quot;3&quot;
services:
    tomcat:
        image: &quot;daocloud.io/library/tomcat:8.5.15-jre8&quot;
        restart: always
        container_name: tomcat
        ports:
          - 8080:8080 
        volumes:
          - ./conf/server.xml:/usr/local/tomcat/conf/server.xml
          - ./logs:/usr/local/tomcat/logs
          #- ./webapps://usr/local/tomcat/webapps/ # 发布war包时把注释删掉并在tomcat跟目录下创建webapps目录用于上传war包
          - /etc/localtime:/etc/localtime:ro

</code></pre>
<p><strong>解释:</strong></p>
<pre><code class="language-bash">端口映射前面的端口是宿主机的端口后面是容器的端口如要改tomcat端口只需要改前面的宿主机端口即可不用改容器的（改容器的端口需要同步把serve.xml内的端口也改了）

ports:
  - 8080:8080 
</code></pre>
<pre><code class="language-bash">下面的目录分别是tomcat配置文件目录webapps项目发布目录logs日志目录
conf

webapps

logs
</code></pre>
<h3 id="启动tomcat">启动Tomcat</h3>
<pre><code class="language-bash">docker-compose up -d  # 启动
docker-compose stop  # 停止
docker-compose start # 启动
docker-compose restart # 重启
docker-compose down # 停止容器并移除
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker Compose安装Nginx]]></title>
        <id>https://note.iqtian.com/post/x407Ei7Gs/</id>
        <link href="https://note.iqtian.com/post/x407Ei7Gs/">
        </link>
        <updated>2020-12-14T10:31:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="docker-compose安装nginx">Docker Compose安装Nginx</h3>
<p>为什么要使用Docker Compose安装Nginx，因为Docker方便管理及配置环境等只需要一次即可发布多个环境例如：开发环境、测试环境、生产环境等。</p>
<p><strong>接下来我们需要登录服务器并创建docker-compose.yml及目录：</strong></p>
<p>本 <code>Nginx</code> 部署的是带 <code>HTTPS</code> 的需要创建 <code>cert</code> 证书目录在 <code>root</code> 目录下创建即可(当然不一定要在root目录下创建可以在其他路径创建后面再docker-compose.yml文件内指定即可)</p>
<p>这里默认登录的是root用户则直接在root用户的家目录下创建证书目录</p>
<pre><code class="language-bash">mkdir cert  # 用于存放域名证书
</code></pre>
<p>创建站点目录同样在root用户家目录也可以在其他地方创建后面改docker-compose.yml文件内的路径即可（web下面目录）</p>
<pre><code class="language-bash">mkdir www
</code></pre>
<p>下面创建Nginx目录</p>
<pre><code class="language-bash">mkdir nginx

cd nginx

mkdir conf.d

touch docker-compose.yaml  # docker-compose文件

touch nginx.conf  # Nginx全局配置文件

cd conf.d  # 站点配置目录

touch default.conf  # 这个文件是站点配置文件及一个站点
</code></pre>
<p>目录截图<br>
<img src="https://doc.mqtian.com/uploads/docker/images/m_c591fb4ac6b29fe5092b90ceb130733b_r.png" alt="" loading="lazy"></p>
<h3 id="编写配置文件">编写配置文件</h3>
<p><strong>docker-compose.yml配置文件</strong></p>
<pre><code>vim docker-compose.yaml
</code></pre>
<pre><code class="language-yaml">version: &quot;3&quot;
services:
   nginx:
     image: nginx
     ports:
       - 80:80
       - 443:443
     volumes:
       - ~/cert:/home/cert # HTTPS证书目录挂载到容器的home目录下
       - ~/www:/home/www  # 挂载宿主机上的www目录到容器里的home目录下方便发布web项目
       - ./nginx.conf:/etc/nginx/nginx.conf
       - ./conf.d/:/etc/nginx/conf.d/
       - ./logs:/var/log/nginx # 把容器内的Nginx日志目录挂载到宿主机
       #- ~/download:/home/download
       - /etc/localtime:/etc/localtime:ro #配置容器时间同步
     restart: always
     container_name: nginx
</code></pre>
<p><strong>nginx.conf配置文件</strong></p>
<pre><code class="language-nginx">vim nginx.conf
</code></pre>
<pre><code>user  nginx;
worker_processes  2;
 
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;
 
 
events {
    worker_connections  1024;
}
 
 
http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
 
    log_format  main  '$remote_addr - $remote_user [$time_local] &quot;$request&quot; '
                      '$status $body_bytes_sent &quot;$http_referer&quot; '
                      '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;';
 
    access_log  /var/log/nginx/access.log  main;
 
    sendfile        on;
    #tcp_nopush     on;
 
    keepalive_timeout  65;
 
    # 开启和关闭gzip模式
    gzip on;
    
    # gizp压缩起点，文件大于1k才进行压缩
    gzip_min_length 1k;
    
    # gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间
    gzip_comp_level 9;
    
    # 进行压缩的文件类型。
    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
    
    # nginx对于静态文件的处理模块，开启后会寻找以.gz结尾的文件，直接返回，不会占用cpu进行压缩，如果找不到则不进行压缩
    gzip_static on;
    
    # 是否在http header中添加Vary: Accept-Encoding，建议开启
    gzip_vary on;

    # 设置压缩所需要的缓冲区大小，以4k为单位，如果文件为7k则申请2*4k的缓冲区 
    gzip_buffers 2 4k;

    # 设置gzip压缩针对的HTTP协议版本
    gzip_http_version 1.1;
    
    # 禁用IE 6 gzip
    gzip_disable &quot;MSIE [1-6]\.&quot;;
 
    include /etc/nginx/conf.d/*.conf;

	# 跨域配置
    #add_header Access-Control-Allow-Origin *;
    #add_header Access-Control-Allow-Headers X-Requested-With;
    #add_header Access-Control-Allow-Methods GET,POST,OPTIONS;

    #server { # 配置IP跟未在conf.d目录下配置过站点的域名访问直接返回403
		#listen    80 default_server;
		#listen    443 ssl default_server;
		#server_name _;

		#ssl_certificate      /home/cert/nikouer.com/nikouer.com.pem;
		#ssl_certificate_key  /home/cert/nikouer.com/nikouer.com.key;

		#ssl_session_cache    shared:SSL:1m;
		#ssl_session_timeout  5m;

        #ssl_ciphers  HIGH:!aNULL:!MD5;
        #ssl_prefer_server_ciphers  on;
		#return 403;
    #}
}
</code></pre>
<p><strong>default.conf配置文件</strong></p>
<pre><code class="language-nginx">vim conf.d/default.conf
</code></pre>
<pre><code>server {
        listen          80;
        server_name     mqtian.com www.mqtian.com; # 配置访问的域名（站点域名）
        rewrite ^(.*) https://$server_name$1 permanent; # HTTP--&gt;HTTPS  即访问80端口时自动跳转443端口
    }

    server {
        listen       443 ssl;
        server_name  mqtian.com www.mqtian.com;

        charset utf-8;

        access_log  /var/log/nginx/mqtian.com.log; # 自定义日志输出

        ssl_certificate      /home/cert/mqtian.com/mqtian.com.pem; # SSL证书路径
        ssl_certificate_key  /home/cert/mqtian.com/mqtian.com.key; # SSL证书路径

        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;

        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;

        location / {
            #proxy_pass http://10.0.4.14:8662; # 后端地址
            #client_max_body_size 10M;
            #add_header Content-Security-Policy upgrade-insecure-requests; # 给站点http来源强制改变为https来源
            #proxy_set_header Host $http_host; # Host包含客户端真实的域名和端口号
            #proxy_set_header X-Real-IP $remote_addr; # X-Forwarded-Proto表示客户端真实的协议（http还是https）
            #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # X-Real-IP表示客户端真实的IP
            #proxy_set_header X-Forwarded-Proto $scheme;
            root   /usr/share/nginx/html; # 发布web项目的目录
            index index.html index.html;
        }

        error_page   500 502 503 504 /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
   }
</code></pre>
<h3 id="启动nginx">启动Nginx</h3>
<pre><code class="language-bash">docker-compose up -d  # 启动
docker-compose stop  # 停止
docker-compose start # 启动
docker-compose restart # 重启
docker-compose down # 停止容器并移除
</code></pre>
<h3 id="接下来就访问试试把">接下来就访问试试把</h3>
<p>访问刚刚部署的域名站点 https://mqtian.com</p>
<figure data-type="image" tabindex="1"><img src="https://doc.mqtian.com/uploads/docker/images/m_b709067125d0fbb201141965c328afdd_r.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux系统安装Docker Compose及使用]]></title>
        <id>https://note.iqtian.com/post/kjPm5W4ox/</id>
        <link href="https://note.iqtian.com/post/kjPm5W4ox/">
        </link>
        <updated>2020-12-14T10:31:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="docker-compose-简介">Docker Compose 简介</h3>
<p>Docker Compose 是一种用于通过使用单个命令创建和启动 Docker 应用程序的工具。我们可以使用它来配置应用程序的服务。</p>
<p>它是开发，测试和升级环境的利器。</p>
<p>它提供以下命令来管理应用程序的整个生命周期：</p>
<ul>
<li>
<p>启动，停止和重建服务</p>
</li>
<li>
<p>查看运行服务的状态</p>
</li>
<li>
<p>流式运行服务的日志输出</p>
</li>
<li>
<p>在服务上运行一次性命令</p>
</li>
</ul>
<p>要实现 docker compose，需要包括以下步骤：</p>
<ul>
<li>
<p>将应用程序环境变量放在 Docker 文件中以公开访问。</p>
</li>
<li>
<p>在 docker-compose.yml 文件中提供和配置服务名称，以便它们可以在隔离的环境中一起运行。</p>
</li>
<li>
<p>运行 docker-compose 将启动并运行整个应用程序。</p>
</li>
</ul>
<h3 id="docker-compose-安装">Docker Compose 安装</h3>
<p>以下是在 Ubuntu 系统中安装 Docker Compose 的(具体各版本linux可以手动去Github下载然后上传服务器即可)：</p>
<pre><code>curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
</code></pre>
<p>以下是下载进度：<br>
<img src="/uploads/docker/images/m_62d81622aa6fb61ddce0ca17c736e629_r.png" alt="" loading="lazy"></p>
<p>如果下载时间过长或者下载失败可以手动去Github下载 https://github.com/docker/compose/releases最新版即可下载完之后上传服务器 <code>/usr/local/bin/</code>目录下并给予执行权限</p>
<pre><code>chmod +x /usr/local/bin/docker-compose 给你上传的docker-compose文件执行权限
</code></pre>
<p>如下图<br>
<img src="/uploads/docker/images/m_3fdf778b538ea1d6e61fe523796b262e_r.png" alt="" loading="lazy"></p>
<h3 id="验证docker-compose版本">验证Docker Compose版本</h3>
<pre><code>docker-compose version
</code></pre>
<h3 id="使用docker-compose部署一个tomcat">使用Docker compose部署一个Tomcat</h3>
<p><strong>创建一个名为Tomcat的目录并在下新建docker-compose.yml文件</strong></p>
<pre><code>mkdir tomcat

cd tomcat

touch docker-compose.yaml

vim docker-compose.yaml
</code></pre>
<p><strong>docker-compose.yaml内容：</strong></p>
<pre><code>version: '3'
services:
  tomcat:
    restart: always
    image: tomcat
    container_name: tomcat
    ports:
      - 8000:8000
</code></pre>
<p>参数说明：</p>
<ul>
<li>version：指定脚本语法解释器版本</li>
<li>services：要启动的服务列表
<ul>
<li>webapp：服务名称，可以随便起名，不重复即可
<ul>
<li>restart：启动方式，这里的 always 表示总是启动，即使服务器重启了也会立即启动服务</li>
<li>image：镜像的名称，默认从 Docker Hub 下载</li>
<li>container_name：容器名称，可以随便起名，不重复即可</li>
<li>ports：端口映射列列表，左边为宿主机端口，右边为容器端口</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="docker-compose常用命令">Docker Compose常用命令</h3>
<table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>docker-compose pull</td>
<td>拉取docker-compose.yml文件内编排的服务镜像（自定义的镜像除外因为Docker注册表上没你自定义的镜像）</td>
</tr>
<tr>
<td>docker-compose up</td>
<td>前台运行 如果中断终端时你的服务就会停止运行了</td>
</tr>
<tr>
<td>docker-compose up -d</td>
<td>后台启动</td>
</tr>
<tr>
<td>docker-compose stop</td>
<td>停止</td>
</tr>
<tr>
<td>docker-compose start</td>
<td>启动</td>
</tr>
<tr>
<td>docker-compose restart</td>
<td>重启</td>
</tr>
<tr>
<td>docker-compose ps</td>
<td>查看docker-compose.yml内编排的服务是否在运行与docker ps相同</td>
</tr>
<tr>
<td>docker-compose down</td>
<td>停止并移除容器</td>
</tr>
</tbody>
</table>
<h3 id="访问刚刚部署的tomcat">访问刚刚部署的Tomcat</h3>
<p>使用服务器IP+8080端口就可以访问你部署的Tomcat了<br>
<img src="/uploads/docker/images/m_17719f9026a177b1cb42c7a712635a09_r.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
</feed>